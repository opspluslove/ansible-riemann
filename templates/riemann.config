; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/var/log/riemann/riemann.log"})

;; InfluxDB database details where Riemann will store the data. Setup :username and :password
;; if you added security step behind riemann database access.
{% if riemann_influxdb is defined %}
(def influxdb-credentials
  {:version :{{ riemann_influxdb.version }}
   :host "{{ influxdb_host }}"
   :port {{ influxdb_port }}
   :db "{{ riemann_influxdb.name }}"
   :username "{{ riemann_influxdb.user }}"
   :password "{{ riemann_influxdb.password }}"})

(def influx-batch-forwarder
  (batch 100 1/10
         (async-queue! :agg {:queue-size 1000
                             :core-pool-size 1
                             :max-pool-size 4
                             :keep-alive-time 60000}
                       (influxdb influxdb-credentials))))
{% endif %}

;; Riemann log file location
(logging/init {:file "/var/log/riemann/riemann.log"})

;; Servers
{% for servername, config in riemann_servers.iteritems() %}
({{ servername }}-server
 {
  {% for key, value in config.iteritems() %}
  :{{ key }} {{ value }}
  {% endfor %}
  })
{% endfor %}

;; Expire states from its core's index every 60 seconds. Default is 10.
(periodically-expire 60)

(let [index (index)]
  ;; Inbound events will be passed to these streams:
  (streams
   (default :ttl 60
            ;; Index all events immediately.
            index
            #(info %)

            {% if riemann_influxdb is defined %}
            ;; Send events in batch to influxdb.
            influx-batch-forwarder
            {% endif %}

            ;; Log expired events.
            (expired
             (fn [event] (info "expired" event))))))
